参数说明：
	public ThreadPoolExecutor(
		int corePoolSize,
		int maximumPoolSize,
		long keepAliveTime,
		TimeUnit unit,
		BlockingQueue<Runnable> workQueue,
		ThreadFactory threadFactory,
		RejectedExecutionHandler handler){
			...
	}
	corePoolSize:核心线程数
	maximumPoolSize:线程池允许创建的最大线程数
	keepAliveTime：非核心线程闲置的超时时间，超过这个时间则回收
	TimeUnit:keepAliveTime参数的时间单位
	workQueue:任务队列
	ThreadFactory:线程工厂，可以给每个线程单独设置名字，一般无需设置
	RejectedExecutionHandler:饱和策略

使用流程：
1.创建一个单独的线程池管理类
	/**
	 * @author SamiuZhong
	 * @date 2019/6/11
	 */
	public class MyThreadPoolExecutor extends ThreadPoolExecutor {

		private MyThreadPoolExecutor(){
			super(3,5,1, TimeUnit.SECONDS,
					new LinkedBlockingDeque<>(20));
		}

		public static MyThreadPoolExecutor getInstance(){
			return ThreadPoolHolder.sInstance;
		}

		private static class ThreadPoolHolder{
			private static final MyThreadPoolExecutor sInstance = new MyThreadPoolExecutor();
		}
	}
2.需要的地方调用即可
	private MyThreadPoolExecutor myThreadPoolExecutor;
	myThreadPoolExecutor = MyThreadPoolExecutor.getInstance();
	
	Runnable runnable = new Runnable(){
		...
	}
	
	myThreadPoolExecutor.execute(runnable);