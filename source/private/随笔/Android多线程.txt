1.Android多线程的基本用法
  1.定义一个线程秩序新建一个类继承自Thread，然后重写父类的run()方法，并在里面编写逻辑即可：
    class MyThread extend Thread{
		@Override
		public void run(){
			......
		}	
    }
    启动线程只需new出MyThread的实例，然后调用start()方法即可：
    new MyThread.start();
  2.(更常用方法）：
    class MyThread implements Runnable{
		@Override
		public void run{
			......
		}
    }
    启动线程：
    MyThread myThread = new MyThread();
    new Thread(myThread).start();
  3.匿名内部类（最常用）
    new Thread(new Runnable(){
	@Override
	public void run(){
	    ......
	}
    }).start();

2.在子线程中更新UI
  Android的UI是线程不安全的，也就是说更新UI只能在主线程中进行，在子线程中操作则会崩溃；
  解决（异步消息处理机制）：
  方法1：
  ...MainActivaty...{
      public static final int UPDATE_TEXT = 1;
      private Handler handler = new Handler(){
	  public void handleMessage(Message msg){
	      switch(msg.what){
		  case UPDATE_TEXT:
		      ...(进行UI操作）...
		      break;
		  default:
		      break;
	      }
	  }
      };
      ......
      @Override
      public void onClick(View v){
	  switch(v.getID()){
	      case R.id.change_text:
		  new Thread(new Runnable(){
		      @Override
		      public void run(){
			  Message message = new Message();
			  message.what = UPDATE_TEXT;
			  handler.sendMessage(message);    //将Message对象发送出去
		      }
		  }).start();
		  break;
	      default:
		  break;
	  }
      }
  }    
  方法2:
  runOnUiThread(new Runnable() {
      @Override
      public void run() {
          ...(进行UI操作）...
      }
  });

-------------------------------------------------------------------------------------------
Handler类包含如下方法用于发送、处理消息：

  
void handleMessage(Message msg)：处理消息的方法。该方法通常用于被重写。
  
final boolean hasMessages(int what)：检查消息队列中是否包含what属性为指定值的消息。
  
final boolean hasMessages(int what, Object object)：检查消息队列中是否包含what属性为指定值且object属性为指定对象的消息。
  
多个重载的Message obtainMessage()：获取消息。

  sendEmptyMessage(int what)：发送空消息。
  
final boolean sendEmptyMessageDelayed(int what, long delayMillis)：指定多少毫秒后发送空消息。
  
final boolean sendMessage(Message msg)：立即发送消息。
  
final boolean sendMessageDelayed(Message msg, long delayMillis)：指定多少毫秒后发送消息。
  

Message：Handler接收和处理的消息对象。
    

2个整型数值：轻量级存储int类型的数据。
    
1个Object：任意对象。
    
replyTo：线程通信时使用。
    
what：用户自定义的消息码，让接收者识别消息。
  



MessageQueue：Message的队列。


    采用先进先出的方式管理Message。

    每一个线程最多可以拥有一个。
  



Looper：消息泵，是MessageQueue的管理者，会不断从MessageQueue中取出消息，并将消息分给对应的Handler处理。


    每个线程只有一个Looper。

    Looper.prepare()：为当前线程创建Looper对象。
    
Looper.myLooper()：可以获得当前线程的Looper对象。
    
Handler：能把消息发送给MessageQueue，并负责处理Looper分给它的消息。