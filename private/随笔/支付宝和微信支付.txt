0.准备工作
	1.支付宝的lib包放到项目里面
	2.在build.gradle文件里面引用lib依赖
	 （组件化架构的话参考另一篇笔记"组件化架构下的第三方SDK依赖库的aar正确引用方式"）
	  api (name: 'alipaySdk-15.6.8-20191021122514', ext: 'aar')
	3.微信支付没有lib包，直接添加依赖  
	  api 'com.tencent.mm.opensdk:wechat-sdk-android-with-mta:5.4.0'

1.流程实现(一般在ViewModel里面)	  
	//1代表支付宝支付，2代表微信支付
    private int type = 1;
	private IWXAPI wxapi;
    private Disposable disposable;
	
	/**
     * 生成支付订单
     *
     * @param type 1代表支付宝支付，2代表微信支付，3代表添加银行卡
     */
    @SuppressLint("CheckResult")
    private void getOrder(int type) {
        BillBean billBean = new BillBean();
        billBean.setAmount(String.valueOf(money.get()));
        billBean.setPay(BeanManager.getInstance().getWalletBean().getId());
        billBean.setReceive("0");
        billBean.setType(Constants.RECHARGE);
        billBean.setWalletId(BeanManager.getInstance().getWalletBean().getId());
        if (type == 1) {
            //生成支付宝订单
            billBean.setPayType(Constants.ALI_PAY);
            RequestBody requestBody = RequestBodyUtil.getRequestBody(billBean);
            model.createBill(SPUtils.getInstance().getString(SPKeyGlobal.TOKEN), requestBody)
                    .subscribeOn(Schedulers.io())
                    .observeOn(AndroidSchedulers.mainThread())
                    .doOnSubscribe(disposable -> showDialog())
                    .subscribe(response -> {
                        if (response.getCode() == Constants.NETWORK_OK && !TextUtils.isEmpty(response.getData())) {
                            startAliPay(response.getData());
                        } else {
                            ToastUtils.showShort(R.string.create_bill_fail);
                        }
                    }, throwable -> {
                        dismissDialog();
                        ToastUtils.showShort(R.string.create_bill_fail);
                    });
        } else if (type == 2) {
            //生成微信订单
            billBean.setPayType(Constants.WECHAT_PAY);
            RequestBody requestBody = RequestBodyUtil.getRequestBody(billBean);
            model.createBill(SPUtils.getInstance().getString(SPKeyGlobal.TOKEN), requestBody)
                    .subscribeOn(Schedulers.io())
                    .observeOn(AndroidSchedulers.mainThread())
                    .doOnSubscribe(disposable -> showDialog())
                    .subscribe(response -> {
                        if (response.getCode() == Constants.NETWORK_OK && !TextUtils.isEmpty(response.getData())) {
                            startWeChatPay(response.getData());
                        } else {
                            ToastUtils.showShort(R.string.create_bill_fail);
                        }
                    }, throwable -> {
                        dismissDialog();
                        ToastUtils.showShort(R.string.create_bill_fail);
                    });
        }
    }

    /**
     * 请求支付宝接口
     *
     * @param data
     */
    @SuppressLint("CheckResult")
    private void startAliPay(String data) {
        model.getAliPay(SPUtils.getInstance().getString(SPKeyGlobal.TOKEN), money.get(), data, Constants.BILL)
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(response -> {
                    dismissDialog();
                    wakeUpAliPay(response.getSign());
                }, throwable -> dismissDialog());
    }

    /**
     * 唤醒支付宝APP进行支付操作
     *
     * @param sign
     */
    private void wakeUpAliPay(String sign) {
        final String orderInfo = sign;
        Runnable payRunnable = () -> {
            PayTask aliPay = new PayTask(activity);
            PayResult payResult = new PayResult(aliPay.payV2(orderInfo, true));
            String resultStatus = payResult.getResultStatus();
            if (TextUtils.equals(resultStatus, "9000")) {
                subscribePay();
                RxBus.getDefault().post(Boolean.valueOf(true));
            }
        };
        ExecutorService executorService = Executors.newSingleThreadExecutor();
        executorService.execute(payRunnable);
    }

    /**
     * 请求微信支付接口
     *
     * @param data
     */
    @SuppressLint("CheckResult")
    private void startWeChatPay(String data) {
        model.getWeChatPay(SPUtils.getInstance().getString(SPKeyGlobal.TOKEN), money.get(), data, Constants.BILL)
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(response -> {
                    dismissDialog();
                    wakeUpWeChatPay(response);
                }, throwable -> dismissDialog());
    }

    /**
     * 唤醒微信进行支付操作
     *
     * @param bean
     */
    private void wakeUpWeChatPay(WeChatPayBean bean) {
        wxapi = WXAPIFactory.createWXAPI(context, null);
        wxapi.registerApp(Constants.WX_APP_ID);
        PayReq request = new PayReq();
        request.appId = bean.getAppid();
        request.nonceStr = bean.getNoncestr();
        request.packageValue = "Sign=WXPay";
        request.partnerId = bean.getPartnerid();
        request.prepayId = bean.getPrepayid();
        request.timeStamp = bean.getTimestamp();
        request.sign = bean.getSign();
        wxapi.sendReq(request);
        subscribePay();
    }

    /**
     * RxBus接收支付成功的回调
     */
    private void subscribePay() {
        disposable = RxBus.getDefault().toObservable(Boolean.class)
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(aBoolean -> {
                    if (aBoolean) {
                        ToastUtils.showLong(R.string.pay_success);
                        finish();
                    }
                });
    }

2.微信的话还需要COPY一个回调的Activity：
	public class WXPayEntryActivity extends Activity implements IWXAPIEventHandler {
		private IWXAPI api;

		@Override
		protected void onCreate(Bundle savedInstanceState) {
			super.onCreate(savedInstanceState);
			setContentView(R.layout.activity_wxpay_entry);
			api = WXAPIFactory.createWXAPI(this, Constants.WX_APP_ID);//这里填入自己的微信APPID
			api.handleIntent(getIntent(), this);
		}

		@Override
		public void onReq(BaseReq baseReq) {
			finish();
		}

		@Override
		public void onResp(BaseResp baseResp) {
			if (baseResp.errCode == -1) {
				ToastUtils.showLong(baseResp.errCode + "错误");
			} else if (baseResp.errCode == -2) {
				ToastUtils.showLong( "用户取消支付！");
			} else if (baseResp.errCode == 0) {
				RxBus.getDefault().post(Boolean.valueOf(true));
			}
			finish();
		}

		@Override
		protected void onNewIntent(Intent intent) {
			super.onNewIntent(intent);
			setIntent(intent);
			api.handleIntent(intent, this);
		}
	} 
	
  Layout文件(activity_wxpay_entry.xml)：
	<?xml version="1.0" encoding="utf-8"?>
	<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
		android:layout_width="match_parent"
		android:layout_height="match_parent">

	</androidx.constraintlayout.widget.ConstraintLayout>
  
  Manifest文件：	
	<activity
		android:name=".wxapi.WXPayEntryActivity"
		android:exported="true"
		android:launchMode="singleTop"
		android:theme="@android:style/Theme.Translucent.NoTitleBar">
		<intent-filter>
			<action android:name="android.intent.action.VIEW" />

			<category android:name="android.intent.category.DEFAULT" />

			<data android:scheme="wx999465dc966d6f68" />
		</intent-filter>
	</activity>

3.注意事项
  1.WXPayEntryActivity的位置必须是com.klilala.lifeservice.wxapi
    也就是app模块下创建包wxapi,放在这个包下面，位置、名字等都不能错
  2.appId为微信开发平台生成的，与包名绑定，不能弄错
  3.包名也不能弄错，必须与在微信开发者平台上绑定包名一致
  4.必须要为app下面的build.gradle设置签名，因为微信那边是绑定签名的，
    如果不设置签名的话Androud Studio在debug打包时就会打上一个默认的签名，导致签名与那边绑定的签名不一致
	signingConfigs {
		release {
			storeFile file('KlilalaBuildKey.jks')
			storePassword 'fiphVUpZ5McNSRnunVGwqsj7Me2vkJ6K'
			keyAlias 'klilala'
			keyPassword 'fiphVUpZ5McNSRnunVGwqsj7Me2vkJ6K'
		}
		debug {
			storeFile file('KlilalaBuildKey.jks')
			storePassword 'fiphVUpZ5McNSRnunVGwqsj7Me2vkJ6K'
			keyAlias 'klilala'
			keyPassword 'fiphVUpZ5McNSRnunVGwqsj7Me2vkJ6K'
		}
	}
