https://blog.csdn.net/carson_ho/article/details/73732076

0.在AndroidManifest文件中添加网络权限 
	<uses-permission android:name="android.permission.INTERNET"/>
	
1.app下的build.gradle文件里面添加依赖，由于Retrofit是基于OkHttp，所以还需要添加OkHttp库依赖
	dependencies {
		implementation 'com.squareup.okhttp3:okhttp:3.12.1'
		implementation 'com.squareup.retrofit2:retrofit:2.5.0'
		implementation 'com.squareup.retrofit2:converter-gson:2.5.0'
		implementation 'com.squareup.retrofit2:adapter-rxjava2:2.5.0'
	}

2.创建 接收服务器返回数据 的类
public class Reception {
    ...
    // 根据返回数据的格式和数据解析方式（Json、XML等）定义
    // 下面会在实例进行说明
}

3.创建 用于描述网络请求 的接口：
	Retrofit将 Http请求 抽象成 Java接口：采用 注解 描述网络请求参数 和配置网络请求参数；
	一般来说前半段参数的结尾包含/，后半段不以/为开头
	
public interface GetRequest_Interface {
    @GET("openapi.do?keyfrom=Yanzhikai&key=2032414398&type=data&doctype=json&version=1.1&q=car")
    Call<Translation>  getCall();
    // @GET注解的作用:采用Get方法发送网络请求

    // getCall() = 接收网络请求数据的方法
    // 其中返回类型为Call<*>，*是接收数据的类（即上面定义的Translation类）
    // 如果想直接获得Responsebody中的内容，可以定义网络请求返回值为Call<ResponseBody>
	
	@FormUrlEncoded
	@POST("user/login.do")
	Call<User> login(@Field("username") String userName, @Field("password") String password);
}

4.创建Retrofit实例
	Retrofit retrofit = new Retrofit.Builder()
				.baseUrl("http://fanyi.youdao.com/") // 设置网络请求的Url地址
                .addConverterFactory(GsonConverterFactory.create()) // 设置数据解析器
                .addCallAdapterFactory(RxJavaCallAdapterFactory.create()) // 支持RxJava平台
                .build();
				
5.创建网络请求接口实例
        // 创建 网络请求接口 的实例
        GetRequest_Interface request = retrofit.create(GetRequest_Interface.class);

        //对 发送请求 进行封装
        Call<Reception> call = request.getCall();

6.发送网络请求（异步/同步）

//发送网络请求(异步)
        call.enqueue(new Callback<Translation>() {
            //请求成功时回调
            @Override
            public void onResponse(Call<Translation> call, Response<Translation> response) {
                //请求处理,输出结果
                response.body().show();
            }

            //请求失败时候的回调
            @Override
            public void onFailure(Call<Translation> call, Throwable throwable) {
                System.out.println("连接失败");
            }
        });

// 发送网络请求（同步）
Response<Reception> response = call.execute();

7. 处理返回数据：通过response类的body()对返回的数据进行处理

//发送网络请求(异步)
        call.enqueue(new Callback<Translation>() {
            //请求成功时回调
            @Override
            public void onResponse(Call<Translation> call, Response<Translation> response) {
                // 对返回数据进行处理
                response.body().show();
            }

            //请求失败时候的回调
            @Override
            public void onFailure(Call<Translation> call, Throwable throwable) {
                System.out.println("连接失败");
            }
        });

// 发送网络请求（同步）
  Response<Reception> response = call.execute();
  // 对返回数据进行处理
  response.body().show();


-------------------------2019.3.4更新-----------------------
Demo：调用金山词霸API实现单词的翻译功能
URL：http://fy.iciba.com/ajax.php?a=fy&f=auto&t=auto&w=hello%20world

1.添加相应依赖和权限；
2.创建返回数据的类
	public class Translation {
		...
	}
	
3.创建描述网络请求的接口	
	public interface GetRequest_Interface {

		@GET("ajax.php?a=fy&f=auto&t=auto&w=hello%20world")
		Call<Translation> getCall();
	}
	
4.创建Retrofit对象
5.创建网络请求接口的实例
6.发送网络请求	
4,5,6均在7中实现

7.处理返回数据(Activity中)	
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_retrofit);

        request();
    }

    public void request(){

        //步骤4：创建Retrofit对象
        Retrofit retrofit = new Retrofit.Builder()
                .baseUrl("http://fy.iciba.com/")
                .addConverterFactory(GsonConverterFactory.create())
                .build();

        //步骤5：创建 网络请求接口 的实例
        final GetRequest_Interface request = retrofit.create(GetRequest_Interface.class);
        //对 发送请求 进行封装
        Call<Translation> call = request.getCall();

        //步骤6：发送网络请求(异步)
        call.enqueue(new Callback<Translation>() {
            //请求成功时回调
            @Override
            public void onResponse(Call<Translation> call, Response<Translation> response) {
                //步骤7：处理返回的数据结果
                System.out.println(response.body().toString());
            }

            //请求失败时回调
            @Override
            public void onFailure(Call<Translation> call, Throwable t) {
                System.out.println("连接失败");
            }
        });
    }
	
-------------------------2019.6.6更新----------------------
Retrofit接口参数
@Path：所有在网址中的参数（URL的问号前面），如：http://192.168.1.1/api/Accounts/{accountId}
@Query：URL问号后面的参数，如：http://192.168.1.1/api/Comments?access_token={access_token}
@QueryMap：相当于多个@Query
@Field：用于POST请求，提交单个数据
@FieldMap：以map形式提交多个Field（Retrofit2.0之后添加）
@Body：相当于多个@Field，以对象的形式提交

public interface GetShopList {
    @POST("service/getUserShopList.action")
    Call<ShopList> getCall(@Field("token")String token, @FieldMap Map<String,Integer> params);
}
